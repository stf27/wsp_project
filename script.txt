For my navigation component, I first set the background color by accessing the nav element.
I then encompassed the nav with a wrapper so that I could set the max width of just the words in the nav and not the background color.
I then floated the logo left and the unordered list of links right.
I floated each list element left while also adding padding to give each element some separation.
I then set the font properties for the links and set the style to uppercase to match the look of the component.
To make the final touches for this component, I had to use a couple of media queries.
The first one sets the font size and logo size lower.
The second one allowed me to switch the nav over from the five different links to one main link that would let the user access the nav called Menu.
Using these media queries, I was able to make the nav fully responsive and work on any screen size.

For my second component, I first set the max width of the section in order to limit how large the component could get.
I then use a 0 auto margin in order to center the component.
I then set each article to be a width of 25% and to float left.
This allowed me to lay out each element in a row.
Next I added the images above the text.
To do this, I added a background image to each article, told it to not repeat, and centered it in the article.
I then added padding to the headers of each article. 
This allowed me to push the content down so that the image wasn't overlapping with the text.
Then I set the font properties for the headers and the paragraphs, styled the link to have no decoration and be all uppercase.
The final step was to get it mobile friendly.
I used two media queries to do this.
The first set the width of each article to 50% when the screen gets a bit smaller.
After doing this, there was an overlapping issue with the 3rd and 4th article.
To fix this I cleared the float of the 3rd article.
Finally when the screen gets really small I set the width of each article to 100% of its container.

This component was the most challenging for me.
The first step was to set the width and height of the images to fill the articles holding them. That part was easy.
The challenge I faced was positioning the personal information over the image correctly.
I tried to get the content to take up 100% of the article, just like the images.
It would not let me do that however, so I had to adjust the padding for the information based on the window size.
To do this I have a few media queries set at different widths.
Each article is floated left and then it's width is calculated to be 1/3 of the window until it hits a specific width.
Then, using media queries, the grid goes to two per row and eventually one per row.
The personal information was then stylized to be centered over the image and sized accordingly.
The links are all stylized using a background image.
There is just one image that it uses and then I specified the background position for each link.
To access each link individually, I used the nth-child() selector.
The hover transition was pretty simple.
I created a slightly transparent background color, added a transition effect, and set its opacity to 0.
This hides the hover and the personal content until you actually hover over the image. 
At which time the opacity is set to 1 and you see everything.
Finally, one major problem I had was the darkened hover was disappearing after the animation was complete.
I did some research and found that setting the position to absolute would fix it.
When I tried that, my entire component broke. So I dug deeper.
Eventually I found the backface-visibility: hidden attribute and that solved all my problems.

To stylize the call to action, I first added the dog to the background of the main section.
I then added padding to the section in order to move all the content of the call to action to the right side.
All content is display: block because there is nothing next to each other. Everything is on top of each other.
After that, I added the images to the content.
I then stylized the anchor to look like a button, using borders and so on, that would take the user to a purchase page.

To stylize this component, I first set its max width and centered it in order to encompass the component and restrict how big it could get.
Next I stylized the header to be a certain font, size, and color. And then I edited the letter spacing to replicate the look of the website.
From there, I formatted the input boxes to have padding around them to make that bigger box look.
I changed the borders of the input boxes to be lighter and set their width to 100% of the section enclosing them.
I then set their display to block in order to stack each piece on top of each other.
I then formatted the button to have a green border and green fill on hover and I added an ease-in-out transition effect.
Add some padding to the button and I was finished.

The blog was pretty straightforward. First I set the max width of the header and the max width of the articles.
They were specified separately because the header extended out much further than the articles did.
I then set a border bottom on my header and and h2 within the header.
This allowed me to create the double line that you see at the top of the page.
Within each article I styled the font, size, and color for each header, anchor, and blockquote.
I then used to nth-child selector to access one of the articles and add the dashed line you see between each article.
Finally, all the content was centered except for one link.
To access this link and right align it, I used the last-child selector and floated it right.

For this component I first set the max width of the form.
I then centered the image above the form using margin 0 auto.
I then stylized the input boxes to be their specific size and padding.
To get the I forgot links on the right side, I used float right.
In order to attach the show section and its checkbox to the password field, 
I had to use the nth-child selector and then apply inline-block on the input field and vertical align to get it to line up exactly with the field.
I then added a percent padding to help it scale as the window changed sizes.
One thing I wasn't able to accomplish was changing the checkbox to the custom image that the site uses.
I could not access the file in order to work with it.
Next came the button and the stay logged in field.
I formatted them with margins and padding like the rest of the component and then I floated the button left and the stay logged in right.
Next I cleared the float for the links for creating and account and trouble logging in.
I aligned the elements in the center using text-align, removed their text decoration, and added a border bottom to each link. 
If you look closely to the links on the actual page, you will see that they used borders as well instead of text decoration.
Finally, I added a couple of media queries to lower the font size and adjust the padding for the button, show password, and stay logged in elements as the screen became smaller.

For this component, I set the max width and centered it to contain the section.
I then set the font properties and background color for the component.
I then added the image of the map at the top of the section and set its width to fill it.
I then accessed the text and formatted it to to be white and grey (except for department which I made green).
Finally I text-aligned everything to center it in the component.

For the news stream I was unable to get the profile pictures for the post I was recreating but I was able to access certain icons that each post uses.
To format this component, I broke it up into many different sections.
Next there I set the font properties for the entire article.
From there I used the nth-child selector to access each of the individual sections and align and format their content one at a time.
I floated some things left and couple things right but for the most part I was able to recreate the layout using display block and display inline.
As a final touch, I added a background color to the page itself to recreate the look Google+ has in their background.

For my footer component, I broke the pieces up into two footers.
The first footer contains the images and links to this person's social media pages.
To create the same look I first got the image they used for all the icons.
I then went in to each individual link and set the width and height in order to create a correctly sized box to hold the icons.
Next I set the background image and background position for each link according to what the social media link was.
The hover had separate icons that it used as well.
So I went in and did the same process for them.
I then set the width of the unordered list and added a right margin to each list element.
This allowed me to restrict how far the icons fan out and it also allowed me to center it on the page.
Finally I formatted the bottom footer to have a top border, centered the text, and added lots of padding to recreate the look on the website.





































